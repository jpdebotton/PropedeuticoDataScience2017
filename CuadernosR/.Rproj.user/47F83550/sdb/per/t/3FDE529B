{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Tipos de datos en R\"\noutput: html_notebook\n---\n\n## Variables\n\nUsar el simbolo `<-` o `=` para asignar variables. El estilo recomendado en R es el primero.\n\n```{r}\nx <- 0\nx\n```\n\n```{r}\nx <- \"hola\"\nx\n```\n\nLa unidad mas basica de procesamiento en R son los vectores que se obtienen concatenando elementos con la funcion `c()` y separando con comas. Son como las lista de Python pero todos los elementos deben ser del mismo tipo.\n\n```{r}\nx <- c(1,2,3,1,2,3)\nx\n```\n\n\n```{r}\ny <- c(\"hola\", \"adios\")\ny\n```\n\nTodos los elementos de un vector deben ser del mismo tipo, pero R adivina el tipo si dan elementos de distintos tipos. Por ejemplon en el siguiente ejemplo los numeros se vuelven strings, llamados characters en R.\n\n```{r}\nx <- c(1,2,\"hola\")\nclass(x)\n```\n\nLos vectores en R permiten hacer aritmetica puntual, es decir, pueden sumar, multiplicarse y dividirse elemento a elemento entre vectores del mismo tamano.\n\n```{r}\nx <- 1:4 # forma rapida de c(1,2,3,4)\ny <- c(-1,-2,-3,-4)\n```\n\n```{r}\nx + y\n```\n\n```{r}\nx * y\n```\n\n```{r}\nx / y\n```\n\n## Los tipos de datos en R\n\nLos tipos de datos en R estan basados en los tipos de datos \"estadisticos\". La unidad basica en R son los vectores. Un dato solo es un vector de longitud \"1\". Los posibles tipos de vectores son:\n\n* character (strings/texto)\n* numeric (datos continuos numericos)\n* integer (enteros)\n* logical (TRUE/FALSE)\n* (el raro) factor (el uso es como variable categorica, se especifican las posibles categorias)\n* (tambien raro) ordered (es un factor pero las categorias tienen un orden)\n\n\n#### Ejemplos:\n\n\n```{r}\nx <- 10:15\nprint(x)\nprint(class(x))\n```\n\n```{r}\nprint(class(3.1))\nprint(class(c(0.0, 0.1)))\n```\n\nHay recoversion automatica\n\n```{r}\nx <- c(1,2) + 2.5\nprint(x) # c(1,2) integer se vuelve numeric al suma 2.5\nprint(class(x))\n```\n\n## Listas\n\nLas listas, a diferencias los vectores, pueden tener elementos de distintos tipos. Se construyen con la funcion `list`, pueden contener vectores, o cualquier tipo vector en sus entradas.\n\n```{r}\nmylist <- list(1:10, letters[1:5], c(TRUE, TRUE, FALSE))\nprint(mylist)\n```\n\nUna diferencia importante con los vectores, es que mientras los elementos de un vectores se acceden con corchetes simples, los elementos de una lista con doble corchete.\n\n```{r}\nmylist[[2]]\n```\n\nLas listas pueden asignar nombres a cada uno de sus elementos.\n\n```{r}\nmylist2 <- list(\n  enteros = 1:10, \n  letras = letters[1:5], \n  booleanos = c(TRUE, TRUE, FALSE)\n)\n```\n\nAhora puedo acceder a cada elemento de la lista por su nombre, ya sea usando dobles corchetes, o el signo de pesos.\n\n```{r}\nmylist2$letras\n```\n\n\n```{r}\nmylist2[[\"enteros\"]]\n```\n\n## DataFrames o Bases de Datos\n\nUn caso particular de listas es un data frame. Pero es el mas importante y todo R esta disenado para funcionar con data frames. Son listas donde todos los elementos son vectores y todos son del mismo tanmano, es como un \"array\" con muchos tipos datos, y cada elemento de la lista se interpreta como COLUMNA.\n\n```{r}\nmydata <- data.frame(\n  peso = c(76, 66, 70), #kilogramos\n  altura = c(173, 170, 155), #centrimetros\n  sexo = c(\"H\", \"M\", \"M\")\n)\nmydata\n```\n\n```{r}\nprint(class(mydata))\n```\n\nHay muchos metodos hechos ya para data.frames\n\n```{r}\npairs(mydata) # hace un scatterplot para a par\n```\n\nAcceden a las variables es igual que con listas\n\n```{r}\nmydata$sexo\n```\n\nPor default los data.frames se crean los strings como factores, hay dos formas de cambiar ese comportamiento:\n1) Usando la opcion `stringsAsFactors = FALSE` al crear el data.frame\n2) O haciendo una conversion posterior con `as.character()`\n\n```{r}\nprint(class(mydata$sexo))\nprint(class(as.character(mydata$sexo)))\n```\n\nLos nombres de los data.frames (y de las listas) se accede (y cambian) con la funcion names\n\n```{r}\nnames(mydata)\n```\n\n```{r}\nnames(mydata) <- c(\"Peso\", \"Altura\", \"Sexo\")\n```\n\n```{r}\nmydata\n```\n\nLos data.frames a diferencia de las listas, tambien tienen row.names,\n\n```{r}\nrow.names(mydata) <- paste(\"Sujeto\", 1:3)\nmydata\n```\n\nY pueden acceder a un dato por fila y variable\n\n\n```{r}\nmydata[\"Sujeto 1\", \"Peso\"]\n```\n\n",
    "created" : 1499217960079.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "800902231",
    "id" : "3FDE529B",
    "lastKnownWriteTime" : 1499822713,
    "last_content_update" : 1499822713645,
    "path" : "~/GitHub/PropedeuticoDataScience2017/CuadernosR/1_rbasics/UsoBasicoR.Rmd",
    "project_path" : "1_rbasics/UsoBasicoR.Rmd",
    "properties" : {
        "chunk_output_type" : "inline"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}